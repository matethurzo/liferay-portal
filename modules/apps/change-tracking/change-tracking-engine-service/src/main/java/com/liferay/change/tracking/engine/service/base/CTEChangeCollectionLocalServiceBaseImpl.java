/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.engine.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.change.tracking.engine.model.CTEChangeCollection;
import com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalService;
import com.liferay.change.tracking.engine.service.persistence.CTEChangeCollectionPersistence;
import com.liferay.change.tracking.engine.service.persistence.CTEChangeEntryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cte change collection local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.change.tracking.engine.service.impl.CTEChangeCollectionLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.change.tracking.engine.service.impl.CTEChangeCollectionLocalServiceImpl
 * @see com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CTEChangeCollectionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CTEChangeCollectionLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalServiceUtil} to access the cte change collection local service.
	 */

	/**
	 * Adds the cte change collection to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeCollection the cte change collection
	 * @return the cte change collection that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEChangeCollection addCTEChangeCollection(
		CTEChangeCollection cteChangeCollection) {
		cteChangeCollection.setNew(true);

		return cteChangeCollectionPersistence.update(cteChangeCollection);
	}

	/**
	 * Creates a new cte change collection with the primary key. Does not add the cte change collection to the database.
	 *
	 * @param cteChangeCollectionId the primary key for the new cte change collection
	 * @return the new cte change collection
	 */
	@Override
	@Transactional(enabled = false)
	public CTEChangeCollection createCTEChangeCollection(
		long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.create(cteChangeCollectionId);
	}

	/**
	 * Deletes the cte change collection with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeCollectionId the primary key of the cte change collection
	 * @return the cte change collection that was removed
	 * @throws PortalException if a cte change collection with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEChangeCollection deleteCTEChangeCollection(
		long cteChangeCollectionId) throws PortalException {
		return cteChangeCollectionPersistence.remove(cteChangeCollectionId);
	}

	/**
	 * Deletes the cte change collection from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeCollection the cte change collection
	 * @return the cte change collection that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEChangeCollection deleteCTEChangeCollection(
		CTEChangeCollection cteChangeCollection) {
		return cteChangeCollectionPersistence.remove(cteChangeCollection);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CTEChangeCollection.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cteChangeCollectionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cteChangeCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cteChangeCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cteChangeCollectionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cteChangeCollectionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CTEChangeCollection fetchCTEChangeCollection(
		long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.fetchByPrimaryKey(cteChangeCollectionId);
	}

	/**
	 * Returns the cte change collection with the primary key.
	 *
	 * @param cteChangeCollectionId the primary key of the cte change collection
	 * @return the cte change collection
	 * @throws PortalException if a cte change collection with the primary key could not be found
	 */
	@Override
	public CTEChangeCollection getCTEChangeCollection(
		long cteChangeCollectionId) throws PortalException {
		return cteChangeCollectionPersistence.findByPrimaryKey(cteChangeCollectionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cteChangeCollectionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEChangeCollection.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"cteChangeCollectionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cteChangeCollectionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CTEChangeCollection.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"cteChangeCollectionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cteChangeCollectionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEChangeCollection.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"cteChangeCollectionId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cteChangeCollectionLocalService.deleteCTEChangeCollection((CTEChangeCollection)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cteChangeCollectionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cte change collections.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cte change collections
	 * @param end the upper bound of the range of cte change collections (not inclusive)
	 * @return the range of cte change collections
	 */
	@Override
	public List<CTEChangeCollection> getCTEChangeCollections(int start, int end) {
		return cteChangeCollectionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cte change collections.
	 *
	 * @return the number of cte change collections
	 */
	@Override
	public int getCTEChangeCollectionsCount() {
		return cteChangeCollectionPersistence.countAll();
	}

	/**
	 * Updates the cte change collection in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeCollection the cte change collection
	 * @return the cte change collection that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEChangeCollection updateCTEChangeCollection(
		CTEChangeCollection cteChangeCollection) {
		return cteChangeCollectionPersistence.update(cteChangeCollection);
	}

	/**
	 */
	@Override
	public void addCTEChangeEntryCTEChangeCollection(long cteChangeEntryId,
		long cteChangeCollectionId) {
		cteChangeEntryPersistence.addCTEChangeCollection(cteChangeEntryId,
			cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public void addCTEChangeEntryCTEChangeCollection(long cteChangeEntryId,
		CTEChangeCollection cteChangeCollection) {
		cteChangeEntryPersistence.addCTEChangeCollection(cteChangeEntryId,
			cteChangeCollection);
	}

	/**
	 */
	@Override
	public void addCTEChangeEntryCTEChangeCollections(long cteChangeEntryId,
		long[] cteChangeCollectionIds) {
		cteChangeEntryPersistence.addCTEChangeCollections(cteChangeEntryId,
			cteChangeCollectionIds);
	}

	/**
	 */
	@Override
	public void addCTEChangeEntryCTEChangeCollections(long cteChangeEntryId,
		List<CTEChangeCollection> cteChangeCollections) {
		cteChangeEntryPersistence.addCTEChangeCollections(cteChangeEntryId,
			cteChangeCollections);
	}

	/**
	 */
	@Override
	public void clearCTEChangeEntryCTEChangeCollections(long cteChangeEntryId) {
		cteChangeEntryPersistence.clearCTEChangeCollections(cteChangeEntryId);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeEntryCTEChangeCollection(long cteChangeEntryId,
		long cteChangeCollectionId) {
		cteChangeEntryPersistence.removeCTEChangeCollection(cteChangeEntryId,
			cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeEntryCTEChangeCollection(long cteChangeEntryId,
		CTEChangeCollection cteChangeCollection) {
		cteChangeEntryPersistence.removeCTEChangeCollection(cteChangeEntryId,
			cteChangeCollection);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeEntryCTEChangeCollections(
		long cteChangeEntryId, long[] cteChangeCollectionIds) {
		cteChangeEntryPersistence.removeCTEChangeCollections(cteChangeEntryId,
			cteChangeCollectionIds);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeEntryCTEChangeCollections(
		long cteChangeEntryId, List<CTEChangeCollection> cteChangeCollections) {
		cteChangeEntryPersistence.removeCTEChangeCollections(cteChangeEntryId,
			cteChangeCollections);
	}

	/**
	 * Returns the cteChangeEntryIds of the cte change entries associated with the cte change collection.
	 *
	 * @param cteChangeCollectionId the cteChangeCollectionId of the cte change collection
	 * @return long[] the cteChangeEntryIds of cte change entries associated with the cte change collection
	 */
	@Override
	public long[] getCTEChangeEntryPrimaryKeys(long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.getCTEChangeEntryPrimaryKeys(cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public List<CTEChangeCollection> getCTEChangeEntryCTEChangeCollections(
		long cteChangeEntryId) {
		return cteChangeEntryPersistence.getCTEChangeCollections(cteChangeEntryId);
	}

	/**
	 */
	@Override
	public List<CTEChangeCollection> getCTEChangeEntryCTEChangeCollections(
		long cteChangeEntryId, int start, int end) {
		return cteChangeEntryPersistence.getCTEChangeCollections(cteChangeEntryId,
			start, end);
	}

	/**
	 */
	@Override
	public List<CTEChangeCollection> getCTEChangeEntryCTEChangeCollections(
		long cteChangeEntryId, int start, int end,
		OrderByComparator<CTEChangeCollection> orderByComparator) {
		return cteChangeEntryPersistence.getCTEChangeCollections(cteChangeEntryId,
			start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getCTEChangeEntryCTEChangeCollectionsCount(long cteChangeEntryId) {
		return cteChangeEntryPersistence.getCTEChangeCollectionsSize(cteChangeEntryId);
	}

	/**
	 */
	@Override
	public boolean hasCTEChangeEntryCTEChangeCollection(long cteChangeEntryId,
		long cteChangeCollectionId) {
		return cteChangeEntryPersistence.containsCTEChangeCollection(cteChangeEntryId,
			cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public boolean hasCTEChangeEntryCTEChangeCollections(long cteChangeEntryId) {
		return cteChangeEntryPersistence.containsCTEChangeCollections(cteChangeEntryId);
	}

	/**
	 */
	@Override
	public void setCTEChangeEntryCTEChangeCollections(long cteChangeEntryId,
		long[] cteChangeCollectionIds) {
		cteChangeEntryPersistence.setCTEChangeCollections(cteChangeEntryId,
			cteChangeCollectionIds);
	}

	/**
	 * Returns the cte change collection local service.
	 *
	 * @return the cte change collection local service
	 */
	public CTEChangeCollectionLocalService getCTEChangeCollectionLocalService() {
		return cteChangeCollectionLocalService;
	}

	/**
	 * Sets the cte change collection local service.
	 *
	 * @param cteChangeCollectionLocalService the cte change collection local service
	 */
	public void setCTEChangeCollectionLocalService(
		CTEChangeCollectionLocalService cteChangeCollectionLocalService) {
		this.cteChangeCollectionLocalService = cteChangeCollectionLocalService;
	}

	/**
	 * Returns the cte change collection persistence.
	 *
	 * @return the cte change collection persistence
	 */
	public CTEChangeCollectionPersistence getCTEChangeCollectionPersistence() {
		return cteChangeCollectionPersistence;
	}

	/**
	 * Sets the cte change collection persistence.
	 *
	 * @param cteChangeCollectionPersistence the cte change collection persistence
	 */
	public void setCTEChangeCollectionPersistence(
		CTEChangeCollectionPersistence cteChangeCollectionPersistence) {
		this.cteChangeCollectionPersistence = cteChangeCollectionPersistence;
	}

	/**
	 * Returns the cte change entry local service.
	 *
	 * @return the cte change entry local service
	 */
	public com.liferay.change.tracking.engine.service.CTEChangeEntryLocalService getCTEChangeEntryLocalService() {
		return cteChangeEntryLocalService;
	}

	/**
	 * Sets the cte change entry local service.
	 *
	 * @param cteChangeEntryLocalService the cte change entry local service
	 */
	public void setCTEChangeEntryLocalService(
		com.liferay.change.tracking.engine.service.CTEChangeEntryLocalService cteChangeEntryLocalService) {
		this.cteChangeEntryLocalService = cteChangeEntryLocalService;
	}

	/**
	 * Returns the cte change entry persistence.
	 *
	 * @return the cte change entry persistence
	 */
	public CTEChangeEntryPersistence getCTEChangeEntryPersistence() {
		return cteChangeEntryPersistence;
	}

	/**
	 * Sets the cte change entry persistence.
	 *
	 * @param cteChangeEntryPersistence the cte change entry persistence
	 */
	public void setCTEChangeEntryPersistence(
		CTEChangeEntryPersistence cteChangeEntryPersistence) {
		this.cteChangeEntryPersistence = cteChangeEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.change.tracking.engine.model.CTEChangeCollection",
			cteChangeCollectionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.change.tracking.engine.model.CTEChangeCollection");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CTEChangeCollectionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CTEChangeCollection.class;
	}

	protected String getModelClassName() {
		return CTEChangeCollection.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cteChangeCollectionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = CTEChangeCollectionLocalService.class)
	protected CTEChangeCollectionLocalService cteChangeCollectionLocalService;
	@BeanReference(type = CTEChangeCollectionPersistence.class)
	protected CTEChangeCollectionPersistence cteChangeCollectionPersistence;
	@BeanReference(type = com.liferay.change.tracking.engine.service.CTEChangeEntryLocalService.class)
	protected com.liferay.change.tracking.engine.service.CTEChangeEntryLocalService cteChangeEntryLocalService;
	@BeanReference(type = CTEChangeEntryPersistence.class)
	protected CTEChangeEntryPersistence cteChangeEntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}