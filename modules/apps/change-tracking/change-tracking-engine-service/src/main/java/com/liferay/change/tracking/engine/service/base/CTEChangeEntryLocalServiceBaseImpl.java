/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.engine.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.change.tracking.engine.model.CTEChangeEntry;
import com.liferay.change.tracking.engine.service.CTEChangeEntryLocalService;
import com.liferay.change.tracking.engine.service.persistence.CTEChangeCollectionPersistence;
import com.liferay.change.tracking.engine.service.persistence.CTEChangeEntryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cte change entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.change.tracking.engine.service.impl.CTEChangeEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.change.tracking.engine.service.impl.CTEChangeEntryLocalServiceImpl
 * @see com.liferay.change.tracking.engine.service.CTEChangeEntryLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CTEChangeEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CTEChangeEntryLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.change.tracking.engine.service.CTEChangeEntryLocalServiceUtil} to access the cte change entry local service.
	 */

	/**
	 * Adds the cte change entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeEntry the cte change entry
	 * @return the cte change entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEChangeEntry addCTEChangeEntry(CTEChangeEntry cteChangeEntry) {
		cteChangeEntry.setNew(true);

		return cteChangeEntryPersistence.update(cteChangeEntry);
	}

	/**
	 * Creates a new cte change entry with the primary key. Does not add the cte change entry to the database.
	 *
	 * @param cteChangeEntryId the primary key for the new cte change entry
	 * @return the new cte change entry
	 */
	@Override
	@Transactional(enabled = false)
	public CTEChangeEntry createCTEChangeEntry(long cteChangeEntryId) {
		return cteChangeEntryPersistence.create(cteChangeEntryId);
	}

	/**
	 * Deletes the cte change entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeEntryId the primary key of the cte change entry
	 * @return the cte change entry that was removed
	 * @throws PortalException if a cte change entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEChangeEntry deleteCTEChangeEntry(long cteChangeEntryId)
		throws PortalException {
		return cteChangeEntryPersistence.remove(cteChangeEntryId);
	}

	/**
	 * Deletes the cte change entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeEntry the cte change entry
	 * @return the cte change entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CTEChangeEntry deleteCTEChangeEntry(CTEChangeEntry cteChangeEntry) {
		return cteChangeEntryPersistence.remove(cteChangeEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CTEChangeEntry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cteChangeEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cteChangeEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cteChangeEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cteChangeEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cteChangeEntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CTEChangeEntry fetchCTEChangeEntry(long cteChangeEntryId) {
		return cteChangeEntryPersistence.fetchByPrimaryKey(cteChangeEntryId);
	}

	/**
	 * Returns the cte change entry with the primary key.
	 *
	 * @param cteChangeEntryId the primary key of the cte change entry
	 * @return the cte change entry
	 * @throws PortalException if a cte change entry with the primary key could not be found
	 */
	@Override
	public CTEChangeEntry getCTEChangeEntry(long cteChangeEntryId)
		throws PortalException {
		return cteChangeEntryPersistence.findByPrimaryKey(cteChangeEntryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cteChangeEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEChangeEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("cteChangeEntryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cteChangeEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CTEChangeEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"cteChangeEntryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cteChangeEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CTEChangeEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("cteChangeEntryId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cteChangeEntryLocalService.deleteCTEChangeEntry((CTEChangeEntry)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cteChangeEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	@Override
	public List<?extends PersistedModel> getPersistedModel(long resourcePrimKey)
		throws PortalException {
		return cteChangeEntryPersistence.findByResourcePrimKey(resourcePrimKey);
	}

	/**
	 * Returns a range of all the cte change entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.engine.model.impl.CTEChangeEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cte change entries
	 * @param end the upper bound of the range of cte change entries (not inclusive)
	 * @return the range of cte change entries
	 */
	@Override
	public List<CTEChangeEntry> getCTEChangeEntries(int start, int end) {
		return cteChangeEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cte change entries.
	 *
	 * @return the number of cte change entries
	 */
	@Override
	public int getCTEChangeEntriesCount() {
		return cteChangeEntryPersistence.countAll();
	}

	/**
	 * Updates the cte change entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cteChangeEntry the cte change entry
	 * @return the cte change entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CTEChangeEntry updateCTEChangeEntry(CTEChangeEntry cteChangeEntry) {
		return cteChangeEntryPersistence.update(cteChangeEntry);
	}

	/**
	 */
	@Override
	public void addCTEChangeCollectionCTEChangeEntry(
		long cteChangeCollectionId, long cteChangeEntryId) {
		cteChangeCollectionPersistence.addCTEChangeEntry(cteChangeCollectionId,
			cteChangeEntryId);
	}

	/**
	 */
	@Override
	public void addCTEChangeCollectionCTEChangeEntry(
		long cteChangeCollectionId, CTEChangeEntry cteChangeEntry) {
		cteChangeCollectionPersistence.addCTEChangeEntry(cteChangeCollectionId,
			cteChangeEntry);
	}

	/**
	 */
	@Override
	public void addCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, long[] cteChangeEntryIds) {
		cteChangeCollectionPersistence.addCTEChangeEntries(cteChangeCollectionId,
			cteChangeEntryIds);
	}

	/**
	 */
	@Override
	public void addCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, List<CTEChangeEntry> cteChangeEntries) {
		cteChangeCollectionPersistence.addCTEChangeEntries(cteChangeCollectionId,
			cteChangeEntries);
	}

	/**
	 */
	@Override
	public void clearCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId) {
		cteChangeCollectionPersistence.clearCTEChangeEntries(cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeCollectionCTEChangeEntry(
		long cteChangeCollectionId, long cteChangeEntryId) {
		cteChangeCollectionPersistence.removeCTEChangeEntry(cteChangeCollectionId,
			cteChangeEntryId);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeCollectionCTEChangeEntry(
		long cteChangeCollectionId, CTEChangeEntry cteChangeEntry) {
		cteChangeCollectionPersistence.removeCTEChangeEntry(cteChangeCollectionId,
			cteChangeEntry);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, long[] cteChangeEntryIds) {
		cteChangeCollectionPersistence.removeCTEChangeEntries(cteChangeCollectionId,
			cteChangeEntryIds);
	}

	/**
	 */
	@Override
	public void deleteCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, List<CTEChangeEntry> cteChangeEntries) {
		cteChangeCollectionPersistence.removeCTEChangeEntries(cteChangeCollectionId,
			cteChangeEntries);
	}

	/**
	 * Returns the cteChangeCollectionIds of the cte change collections associated with the cte change entry.
	 *
	 * @param cteChangeEntryId the cteChangeEntryId of the cte change entry
	 * @return long[] the cteChangeCollectionIds of cte change collections associated with the cte change entry
	 */
	@Override
	public long[] getCTEChangeCollectionPrimaryKeys(long cteChangeEntryId) {
		return cteChangeEntryPersistence.getCTEChangeCollectionPrimaryKeys(cteChangeEntryId);
	}

	/**
	 */
	@Override
	public List<CTEChangeEntry> getCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.getCTEChangeEntries(cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public List<CTEChangeEntry> getCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, int start, int end) {
		return cteChangeCollectionPersistence.getCTEChangeEntries(cteChangeCollectionId,
			start, end);
	}

	/**
	 */
	@Override
	public List<CTEChangeEntry> getCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, int start, int end,
		OrderByComparator<CTEChangeEntry> orderByComparator) {
		return cteChangeCollectionPersistence.getCTEChangeEntries(cteChangeCollectionId,
			start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getCTEChangeCollectionCTEChangeEntriesCount(
		long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.getCTEChangeEntriesSize(cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public boolean hasCTEChangeCollectionCTEChangeEntry(
		long cteChangeCollectionId, long cteChangeEntryId) {
		return cteChangeCollectionPersistence.containsCTEChangeEntry(cteChangeCollectionId,
			cteChangeEntryId);
	}

	/**
	 */
	@Override
	public boolean hasCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId) {
		return cteChangeCollectionPersistence.containsCTEChangeEntries(cteChangeCollectionId);
	}

	/**
	 */
	@Override
	public void setCTEChangeCollectionCTEChangeEntries(
		long cteChangeCollectionId, long[] cteChangeEntryIds) {
		cteChangeCollectionPersistence.setCTEChangeEntries(cteChangeCollectionId,
			cteChangeEntryIds);
	}

	/**
	 * Returns the cte change collection local service.
	 *
	 * @return the cte change collection local service
	 */
	public com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalService getCTEChangeCollectionLocalService() {
		return cteChangeCollectionLocalService;
	}

	/**
	 * Sets the cte change collection local service.
	 *
	 * @param cteChangeCollectionLocalService the cte change collection local service
	 */
	public void setCTEChangeCollectionLocalService(
		com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalService cteChangeCollectionLocalService) {
		this.cteChangeCollectionLocalService = cteChangeCollectionLocalService;
	}

	/**
	 * Returns the cte change collection persistence.
	 *
	 * @return the cte change collection persistence
	 */
	public CTEChangeCollectionPersistence getCTEChangeCollectionPersistence() {
		return cteChangeCollectionPersistence;
	}

	/**
	 * Sets the cte change collection persistence.
	 *
	 * @param cteChangeCollectionPersistence the cte change collection persistence
	 */
	public void setCTEChangeCollectionPersistence(
		CTEChangeCollectionPersistence cteChangeCollectionPersistence) {
		this.cteChangeCollectionPersistence = cteChangeCollectionPersistence;
	}

	/**
	 * Returns the cte change entry local service.
	 *
	 * @return the cte change entry local service
	 */
	public CTEChangeEntryLocalService getCTEChangeEntryLocalService() {
		return cteChangeEntryLocalService;
	}

	/**
	 * Sets the cte change entry local service.
	 *
	 * @param cteChangeEntryLocalService the cte change entry local service
	 */
	public void setCTEChangeEntryLocalService(
		CTEChangeEntryLocalService cteChangeEntryLocalService) {
		this.cteChangeEntryLocalService = cteChangeEntryLocalService;
	}

	/**
	 * Returns the cte change entry persistence.
	 *
	 * @return the cte change entry persistence
	 */
	public CTEChangeEntryPersistence getCTEChangeEntryPersistence() {
		return cteChangeEntryPersistence;
	}

	/**
	 * Sets the cte change entry persistence.
	 *
	 * @param cteChangeEntryPersistence the cte change entry persistence
	 */
	public void setCTEChangeEntryPersistence(
		CTEChangeEntryPersistence cteChangeEntryPersistence) {
		this.cteChangeEntryPersistence = cteChangeEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.change.tracking.engine.model.CTEChangeEntry",
			cteChangeEntryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.change.tracking.engine.model.CTEChangeEntry");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CTEChangeEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CTEChangeEntry.class;
	}

	protected String getModelClassName() {
		return CTEChangeEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cteChangeEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalService.class)
	protected com.liferay.change.tracking.engine.service.CTEChangeCollectionLocalService cteChangeCollectionLocalService;
	@BeanReference(type = CTEChangeCollectionPersistence.class)
	protected CTEChangeCollectionPersistence cteChangeCollectionPersistence;
	@BeanReference(type = CTEChangeEntryLocalService.class)
	protected CTEChangeEntryLocalService cteChangeEntryLocalService;
	@BeanReference(type = CTEChangeEntryPersistence.class)
	protected CTEChangeEntryPersistence cteChangeEntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}