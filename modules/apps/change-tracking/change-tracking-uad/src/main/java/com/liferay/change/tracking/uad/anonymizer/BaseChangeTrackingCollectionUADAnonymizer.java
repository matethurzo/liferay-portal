/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.uad.anonymizer;

import com.liferay.change.tracking.model.ChangeTrackingCollection;
import com.liferay.change.tracking.service.ChangeTrackingCollectionLocalService;
import com.liferay.change.tracking.uad.constants.ChangeTrackingUADConstants;

import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;

import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the change tracking collection UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link ChangeTrackingCollectionUADAnonymizer}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 */
public abstract class BaseChangeTrackingCollectionUADAnonymizer
	extends DynamicQueryUADAnonymizer<ChangeTrackingCollection> {
	@Override
	public void autoAnonymize(
		ChangeTrackingCollection changeTrackingCollection, long userId,
		User anonymousUser) throws PortalException {
		if (changeTrackingCollection.getUserId() == userId) {
			changeTrackingCollection.setUserId(anonymousUser.getUserId());
			changeTrackingCollection.setUserName(anonymousUser.getFullName());
		}

		if (changeTrackingCollection.getStatusByUserId() == userId) {
			changeTrackingCollection.setStatusByUserId(anonymousUser.getUserId());
			changeTrackingCollection.setStatusByUserName(anonymousUser.getFullName());
		}

		changeTrackingCollectionLocalService.updateChangeTrackingCollection(changeTrackingCollection);
	}

	@Override
	public void delete(ChangeTrackingCollection changeTrackingCollection)
		throws PortalException {
		changeTrackingCollectionLocalService.deleteChangeTrackingCollection(changeTrackingCollection);
	}

	@Override
	public Class<ChangeTrackingCollection> getTypeClass() {
		return ChangeTrackingCollection.class;
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return changeTrackingCollectionLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return ChangeTrackingUADConstants.USER_ID_FIELD_NAMES_CHANGE_TRACKING_COLLECTION;
	}

	@Reference
	protected ChangeTrackingCollectionLocalService changeTrackingCollectionLocalService;
}