/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.change.tracking.model.ChangeTrackingCollection;
import com.liferay.change.tracking.service.ChangeTrackingCollectionLocalService;
import com.liferay.change.tracking.service.persistence.ChangeTrackingCollectionPersistence;
import com.liferay.change.tracking.service.persistence.ChangeTrackingEntryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the change tracking collection local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.change.tracking.service.impl.ChangeTrackingCollectionLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.change.tracking.service.impl.ChangeTrackingCollectionLocalServiceImpl
 * @see com.liferay.change.tracking.service.ChangeTrackingCollectionLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ChangeTrackingCollectionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ChangeTrackingCollectionLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.change.tracking.service.ChangeTrackingCollectionLocalServiceUtil} to access the change tracking collection local service.
	 */

	/**
	 * Adds the change tracking collection to the database. Also notifies the appropriate model listeners.
	 *
	 * @param changeTrackingCollection the change tracking collection
	 * @return the change tracking collection that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChangeTrackingCollection addChangeTrackingCollection(
		ChangeTrackingCollection changeTrackingCollection) {
		changeTrackingCollection.setNew(true);

		return changeTrackingCollectionPersistence.update(changeTrackingCollection);
	}

	/**
	 * Creates a new change tracking collection with the primary key. Does not add the change tracking collection to the database.
	 *
	 * @param changeTrackingCollectionId the primary key for the new change tracking collection
	 * @return the new change tracking collection
	 */
	@Override
	@Transactional(enabled = false)
	public ChangeTrackingCollection createChangeTrackingCollection(
		long changeTrackingCollectionId) {
		return changeTrackingCollectionPersistence.create(changeTrackingCollectionId);
	}

	/**
	 * Deletes the change tracking collection with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param changeTrackingCollectionId the primary key of the change tracking collection
	 * @return the change tracking collection that was removed
	 * @throws PortalException if a change tracking collection with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChangeTrackingCollection deleteChangeTrackingCollection(
		long changeTrackingCollectionId) throws PortalException {
		return changeTrackingCollectionPersistence.remove(changeTrackingCollectionId);
	}

	/**
	 * Deletes the change tracking collection from the database. Also notifies the appropriate model listeners.
	 *
	 * @param changeTrackingCollection the change tracking collection
	 * @return the change tracking collection that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChangeTrackingCollection deleteChangeTrackingCollection(
		ChangeTrackingCollection changeTrackingCollection) {
		return changeTrackingCollectionPersistence.remove(changeTrackingCollection);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ChangeTrackingCollection.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return changeTrackingCollectionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.model.impl.ChangeTrackingCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return changeTrackingCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.model.impl.ChangeTrackingCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return changeTrackingCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return changeTrackingCollectionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return changeTrackingCollectionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ChangeTrackingCollection fetchChangeTrackingCollection(
		long changeTrackingCollectionId) {
		return changeTrackingCollectionPersistence.fetchByPrimaryKey(changeTrackingCollectionId);
	}

	/**
	 * Returns the change tracking collection with the primary key.
	 *
	 * @param changeTrackingCollectionId the primary key of the change tracking collection
	 * @return the change tracking collection
	 * @throws PortalException if a change tracking collection with the primary key could not be found
	 */
	@Override
	public ChangeTrackingCollection getChangeTrackingCollection(
		long changeTrackingCollectionId) throws PortalException {
		return changeTrackingCollectionPersistence.findByPrimaryKey(changeTrackingCollectionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(changeTrackingCollectionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ChangeTrackingCollection.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"changeTrackingCollectionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(changeTrackingCollectionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ChangeTrackingCollection.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"changeTrackingCollectionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(changeTrackingCollectionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ChangeTrackingCollection.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"changeTrackingCollectionId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return changeTrackingCollectionLocalService.deleteChangeTrackingCollection((ChangeTrackingCollection)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return changeTrackingCollectionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the change tracking collections.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.change.tracking.model.impl.ChangeTrackingCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of change tracking collections
	 * @param end the upper bound of the range of change tracking collections (not inclusive)
	 * @return the range of change tracking collections
	 */
	@Override
	public List<ChangeTrackingCollection> getChangeTrackingCollections(
		int start, int end) {
		return changeTrackingCollectionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of change tracking collections.
	 *
	 * @return the number of change tracking collections
	 */
	@Override
	public int getChangeTrackingCollectionsCount() {
		return changeTrackingCollectionPersistence.countAll();
	}

	/**
	 * Updates the change tracking collection in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param changeTrackingCollection the change tracking collection
	 * @return the change tracking collection that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChangeTrackingCollection updateChangeTrackingCollection(
		ChangeTrackingCollection changeTrackingCollection) {
		return changeTrackingCollectionPersistence.update(changeTrackingCollection);
	}

	/**
	 */
	@Override
	public void addChangeTrackingEntryChangeTrackingCollection(
		long changeTrackingEntryId, long changeTrackingCollectionId) {
		changeTrackingEntryPersistence.addChangeTrackingCollection(changeTrackingEntryId,
			changeTrackingCollectionId);
	}

	/**
	 */
	@Override
	public void addChangeTrackingEntryChangeTrackingCollection(
		long changeTrackingEntryId,
		ChangeTrackingCollection changeTrackingCollection) {
		changeTrackingEntryPersistence.addChangeTrackingCollection(changeTrackingEntryId,
			changeTrackingCollection);
	}

	/**
	 */
	@Override
	public void addChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId, long[] changeTrackingCollectionIds) {
		changeTrackingEntryPersistence.addChangeTrackingCollections(changeTrackingEntryId,
			changeTrackingCollectionIds);
	}

	/**
	 */
	@Override
	public void addChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId,
		List<ChangeTrackingCollection> changeTrackingCollections) {
		changeTrackingEntryPersistence.addChangeTrackingCollections(changeTrackingEntryId,
			changeTrackingCollections);
	}

	/**
	 */
	@Override
	public void clearChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId) {
		changeTrackingEntryPersistence.clearChangeTrackingCollections(changeTrackingEntryId);
	}

	/**
	 */
	@Override
	public void deleteChangeTrackingEntryChangeTrackingCollection(
		long changeTrackingEntryId, long changeTrackingCollectionId) {
		changeTrackingEntryPersistence.removeChangeTrackingCollection(changeTrackingEntryId,
			changeTrackingCollectionId);
	}

	/**
	 */
	@Override
	public void deleteChangeTrackingEntryChangeTrackingCollection(
		long changeTrackingEntryId,
		ChangeTrackingCollection changeTrackingCollection) {
		changeTrackingEntryPersistence.removeChangeTrackingCollection(changeTrackingEntryId,
			changeTrackingCollection);
	}

	/**
	 */
	@Override
	public void deleteChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId, long[] changeTrackingCollectionIds) {
		changeTrackingEntryPersistence.removeChangeTrackingCollections(changeTrackingEntryId,
			changeTrackingCollectionIds);
	}

	/**
	 */
	@Override
	public void deleteChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId,
		List<ChangeTrackingCollection> changeTrackingCollections) {
		changeTrackingEntryPersistence.removeChangeTrackingCollections(changeTrackingEntryId,
			changeTrackingCollections);
	}

	/**
	 * Returns the changeTrackingEntryIds of the change tracking entries associated with the change tracking collection.
	 *
	 * @param changeTrackingCollectionId the changeTrackingCollectionId of the change tracking collection
	 * @return long[] the changeTrackingEntryIds of change tracking entries associated with the change tracking collection
	 */
	@Override
	public long[] getChangeTrackingEntryPrimaryKeys(
		long changeTrackingCollectionId) {
		return changeTrackingCollectionPersistence.getChangeTrackingEntryPrimaryKeys(changeTrackingCollectionId);
	}

	/**
	 */
	@Override
	public List<ChangeTrackingCollection> getChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId) {
		return changeTrackingEntryPersistence.getChangeTrackingCollections(changeTrackingEntryId);
	}

	/**
	 */
	@Override
	public List<ChangeTrackingCollection> getChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId, int start, int end) {
		return changeTrackingEntryPersistence.getChangeTrackingCollections(changeTrackingEntryId,
			start, end);
	}

	/**
	 */
	@Override
	public List<ChangeTrackingCollection> getChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId, int start, int end,
		OrderByComparator<ChangeTrackingCollection> orderByComparator) {
		return changeTrackingEntryPersistence.getChangeTrackingCollections(changeTrackingEntryId,
			start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getChangeTrackingEntryChangeTrackingCollectionsCount(
		long changeTrackingEntryId) {
		return changeTrackingEntryPersistence.getChangeTrackingCollectionsSize(changeTrackingEntryId);
	}

	/**
	 */
	@Override
	public boolean hasChangeTrackingEntryChangeTrackingCollection(
		long changeTrackingEntryId, long changeTrackingCollectionId) {
		return changeTrackingEntryPersistence.containsChangeTrackingCollection(changeTrackingEntryId,
			changeTrackingCollectionId);
	}

	/**
	 */
	@Override
	public boolean hasChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId) {
		return changeTrackingEntryPersistence.containsChangeTrackingCollections(changeTrackingEntryId);
	}

	/**
	 */
	@Override
	public void setChangeTrackingEntryChangeTrackingCollections(
		long changeTrackingEntryId, long[] changeTrackingCollectionIds) {
		changeTrackingEntryPersistence.setChangeTrackingCollections(changeTrackingEntryId,
			changeTrackingCollectionIds);
	}

	/**
	 * Returns the change tracking collection local service.
	 *
	 * @return the change tracking collection local service
	 */
	public ChangeTrackingCollectionLocalService getChangeTrackingCollectionLocalService() {
		return changeTrackingCollectionLocalService;
	}

	/**
	 * Sets the change tracking collection local service.
	 *
	 * @param changeTrackingCollectionLocalService the change tracking collection local service
	 */
	public void setChangeTrackingCollectionLocalService(
		ChangeTrackingCollectionLocalService changeTrackingCollectionLocalService) {
		this.changeTrackingCollectionLocalService = changeTrackingCollectionLocalService;
	}

	/**
	 * Returns the change tracking collection persistence.
	 *
	 * @return the change tracking collection persistence
	 */
	public ChangeTrackingCollectionPersistence getChangeTrackingCollectionPersistence() {
		return changeTrackingCollectionPersistence;
	}

	/**
	 * Sets the change tracking collection persistence.
	 *
	 * @param changeTrackingCollectionPersistence the change tracking collection persistence
	 */
	public void setChangeTrackingCollectionPersistence(
		ChangeTrackingCollectionPersistence changeTrackingCollectionPersistence) {
		this.changeTrackingCollectionPersistence = changeTrackingCollectionPersistence;
	}

	/**
	 * Returns the change tracking entry local service.
	 *
	 * @return the change tracking entry local service
	 */
	public com.liferay.change.tracking.service.ChangeTrackingEntryLocalService getChangeTrackingEntryLocalService() {
		return changeTrackingEntryLocalService;
	}

	/**
	 * Sets the change tracking entry local service.
	 *
	 * @param changeTrackingEntryLocalService the change tracking entry local service
	 */
	public void setChangeTrackingEntryLocalService(
		com.liferay.change.tracking.service.ChangeTrackingEntryLocalService changeTrackingEntryLocalService) {
		this.changeTrackingEntryLocalService = changeTrackingEntryLocalService;
	}

	/**
	 * Returns the change tracking entry persistence.
	 *
	 * @return the change tracking entry persistence
	 */
	public ChangeTrackingEntryPersistence getChangeTrackingEntryPersistence() {
		return changeTrackingEntryPersistence;
	}

	/**
	 * Sets the change tracking entry persistence.
	 *
	 * @param changeTrackingEntryPersistence the change tracking entry persistence
	 */
	public void setChangeTrackingEntryPersistence(
		ChangeTrackingEntryPersistence changeTrackingEntryPersistence) {
		this.changeTrackingEntryPersistence = changeTrackingEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.change.tracking.model.ChangeTrackingCollection",
			changeTrackingCollectionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.change.tracking.model.ChangeTrackingCollection");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ChangeTrackingCollectionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ChangeTrackingCollection.class;
	}

	protected String getModelClassName() {
		return ChangeTrackingCollection.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = changeTrackingCollectionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ChangeTrackingCollectionLocalService.class)
	protected ChangeTrackingCollectionLocalService changeTrackingCollectionLocalService;
	@BeanReference(type = ChangeTrackingCollectionPersistence.class)
	protected ChangeTrackingCollectionPersistence changeTrackingCollectionPersistence;
	@BeanReference(type = com.liferay.change.tracking.service.ChangeTrackingEntryLocalService.class)
	protected com.liferay.change.tracking.service.ChangeTrackingEntryLocalService changeTrackingEntryLocalService;
	@BeanReference(type = ChangeTrackingEntryPersistence.class)
	protected ChangeTrackingEntryPersistence changeTrackingEntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}