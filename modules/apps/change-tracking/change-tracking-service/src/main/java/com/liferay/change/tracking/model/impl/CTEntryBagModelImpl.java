/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.change.tracking.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.change.tracking.model.CTEntryBag;
import com.liferay.change.tracking.model.CTEntryBagModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CTEntryBag service. Represents a row in the &quot;CTEntryBag&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CTEntryBagModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CTEntryBagImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CTEntryBagImpl
 * @generated
 */
@ProviderType
public class CTEntryBagModelImpl extends BaseModelImpl<CTEntryBag>
	implements CTEntryBagModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ct entry bag model instance should use the <code>CTEntryBag</code> interface instead.
	 */
	public static final String TABLE_NAME = "CTEntryBag";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ctEntryBagId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "ownerCTEntryId", Types.BIGINT },
			{ "ctCollectionId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ctEntryBagId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ownerCTEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table CTEntryBag (ctEntryBagId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,ownerCTEntryId LONG,ctCollectionId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CTEntryBag";
	public static final String ORDER_BY_JPQL = " ORDER BY ctEntryBag.ctEntryBagId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CTEntryBag.ctEntryBagId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.change.tracking.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.change.tracking.model.CTEntryBag"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.change.tracking.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.change.tracking.model.CTEntryBag"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.change.tracking.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.change.tracking.model.CTEntryBag"),
			true);
	public static final long CTCOLLECTIONID_COLUMN_BITMASK = 1L;
	public static final long OWNERCTENTRYID_COLUMN_BITMASK = 2L;
	public static final long CTENTRYBAGID_COLUMN_BITMASK = 4L;
	public static final String MAPPING_TABLE_CTENTRYBAGS_CTENTRIES_NAME = "CTEntryBags_CTEntries";
	public static final Object[][] MAPPING_TABLE_CTENTRYBAGS_CTENTRIES_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "ctEntryId", Types.BIGINT },
			{ "ctEntryBagId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CTENTRYBAGS_CTENTRIES_SQL_CREATE = "create table CTEntryBags_CTEntries (companyId LONG not null,ctEntryId LONG not null,ctEntryBagId LONG not null,primary key (ctEntryId, ctEntryBagId))";
	public static final boolean FINDER_CACHE_ENABLED_CTENTRYBAGS_CTENTRIES = GetterUtil.getBoolean(com.liferay.change.tracking.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.CTEntryBags_CTEntries"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.change.tracking.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.change.tracking.model.CTEntryBag"));

	public CTEntryBagModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ctEntryBagId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCtEntryBagId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ctEntryBagId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CTEntryBag.class;
	}

	@Override
	public String getModelClassName() {
		return CTEntryBag.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CTEntryBag, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CTEntryBag, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<CTEntryBag, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((CTEntryBag)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CTEntryBag, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CTEntryBag, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((CTEntryBag)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<CTEntryBag, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CTEntryBag, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CTEntryBag, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<CTEntryBag, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<CTEntryBag, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<CTEntryBag, Object>>();
		Map<String, BiConsumer<CTEntryBag, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<CTEntryBag, ?>>();


		attributeGetterFunctions.put("ctEntryBagId", CTEntryBag::getCtEntryBagId);
		attributeSetterBiConsumers.put("ctEntryBagId", (BiConsumer<CTEntryBag, Long>)CTEntryBag::setCtEntryBagId);
		attributeGetterFunctions.put("companyId", CTEntryBag::getCompanyId);
		attributeSetterBiConsumers.put("companyId", (BiConsumer<CTEntryBag, Long>)CTEntryBag::setCompanyId);
		attributeGetterFunctions.put("userId", CTEntryBag::getUserId);
		attributeSetterBiConsumers.put("userId", (BiConsumer<CTEntryBag, Long>)CTEntryBag::setUserId);
		attributeGetterFunctions.put("userName", CTEntryBag::getUserName);
		attributeSetterBiConsumers.put("userName", (BiConsumer<CTEntryBag, String>)CTEntryBag::setUserName);
		attributeGetterFunctions.put("createDate", CTEntryBag::getCreateDate);
		attributeSetterBiConsumers.put("createDate", (BiConsumer<CTEntryBag, Date>)CTEntryBag::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", CTEntryBag::getModifiedDate);
		attributeSetterBiConsumers.put("modifiedDate", (BiConsumer<CTEntryBag, Date>)CTEntryBag::setModifiedDate);
		attributeGetterFunctions.put("ownerCTEntryId", CTEntryBag::getOwnerCTEntryId);
		attributeSetterBiConsumers.put("ownerCTEntryId", (BiConsumer<CTEntryBag, Long>)CTEntryBag::setOwnerCTEntryId);
		attributeGetterFunctions.put("ctCollectionId", CTEntryBag::getCtCollectionId);
		attributeSetterBiConsumers.put("ctCollectionId", (BiConsumer<CTEntryBag, Long>)CTEntryBag::setCtCollectionId);


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCtEntryBagId() {
		return _ctEntryBagId;
	}

	@Override
	public void setCtEntryBagId(long ctEntryBagId) {
		_ctEntryBagId = ctEntryBagId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getOwnerCTEntryId() {
		return _ownerCTEntryId;
	}

	@Override
	public void setOwnerCTEntryId(long ownerCTEntryId) {
		_columnBitmask |= OWNERCTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalOwnerCTEntryId) {
			_setOriginalOwnerCTEntryId = true;

			_originalOwnerCTEntryId = _ownerCTEntryId;
		}

		_ownerCTEntryId = ownerCTEntryId;
	}

	public long getOriginalOwnerCTEntryId() {
		return _originalOwnerCTEntryId;
	}

	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		_columnBitmask |= CTCOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalCtCollectionId) {
			_setOriginalCtCollectionId = true;

			_originalCtCollectionId = _ctCollectionId;
		}

		_ctCollectionId = ctCollectionId;
	}

	public long getOriginalCtCollectionId() {
		return _originalCtCollectionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CTEntryBag.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CTEntryBag toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CTEntryBag)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CTEntryBagImpl ctEntryBagImpl = new CTEntryBagImpl();

		ctEntryBagImpl.setCtEntryBagId(getCtEntryBagId());
		ctEntryBagImpl.setCompanyId(getCompanyId());
		ctEntryBagImpl.setUserId(getUserId());
		ctEntryBagImpl.setUserName(getUserName());
		ctEntryBagImpl.setCreateDate(getCreateDate());
		ctEntryBagImpl.setModifiedDate(getModifiedDate());
		ctEntryBagImpl.setOwnerCTEntryId(getOwnerCTEntryId());
		ctEntryBagImpl.setCtCollectionId(getCtCollectionId());

		ctEntryBagImpl.resetOriginalValues();

		return ctEntryBagImpl;
	}

	@Override
	public int compareTo(CTEntryBag ctEntryBag) {
		long primaryKey = ctEntryBag.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CTEntryBag)) {
			return false;
		}

		CTEntryBag ctEntryBag = (CTEntryBag)obj;

		long primaryKey = ctEntryBag.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CTEntryBagModelImpl ctEntryBagModelImpl = this;

		ctEntryBagModelImpl._setModifiedDate = false;

		ctEntryBagModelImpl._originalOwnerCTEntryId = ctEntryBagModelImpl._ownerCTEntryId;

		ctEntryBagModelImpl._setOriginalOwnerCTEntryId = false;

		ctEntryBagModelImpl._originalCtCollectionId = ctEntryBagModelImpl._ctCollectionId;

		ctEntryBagModelImpl._setOriginalCtCollectionId = false;

		ctEntryBagModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CTEntryBag> toCacheModel() {
		CTEntryBagCacheModel ctEntryBagCacheModel = new CTEntryBagCacheModel();

		ctEntryBagCacheModel.ctEntryBagId = getCtEntryBagId();

		ctEntryBagCacheModel.companyId = getCompanyId();

		ctEntryBagCacheModel.userId = getUserId();

		ctEntryBagCacheModel.userName = getUserName();

		String userName = ctEntryBagCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ctEntryBagCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ctEntryBagCacheModel.createDate = createDate.getTime();
		}
		else {
			ctEntryBagCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ctEntryBagCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ctEntryBagCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ctEntryBagCacheModel.ownerCTEntryId = getOwnerCTEntryId();

		ctEntryBagCacheModel.ctCollectionId = getCtCollectionId();

		return ctEntryBagCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CTEntryBag, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<CTEntryBag, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<CTEntryBag, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CTEntryBag)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CTEntryBag, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CTEntryBag, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<CTEntryBag, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CTEntryBag)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CTEntryBag.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CTEntryBag.class, ModelWrapper.class
		};
	private long _ctEntryBagId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _ownerCTEntryId;
	private long _originalOwnerCTEntryId;
	private boolean _setOriginalOwnerCTEntryId;
	private long _ctCollectionId;
	private long _originalCtCollectionId;
	private boolean _setOriginalCtCollectionId;
	private long _columnBitmask;
	private CTEntryBag _escapedModel;
}